'use strict';
function dec2hex ( textString ) {
 return (textString+0).toString(16).toUpperCase();
}

function  dec2hex4 ( textString ) {  	 
  var hexequiv = new Array ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F");
  return hexequiv[(textString >> 12) & 0xF] + hexequiv[(textString >> 8) & 0xF] + hexequiv[(textString >> 4) & 0xF] + hexequiv[textString & 0xF];
}

function convertChar2CP ( textString ) {
  var outputString = "";
  var haut = 0;
  var n = 0;
  for (var i = 0; i < textString.length; i++) {
    var b = textString.charCodeAt(i);  // alert('b:'+dec2hex(b));
    if (b < 0 || b > 0xFFFF) {
      outputString += '!erreur ' + dec2hex(b) + '!';
    }
    if (haut != 0) {
      if (0xDC00 <= b && b <= 0xDFFF) {
        outputString += dec2hex(0x10000 + ((haut - 0xD800) << 10) + (b - 0xDC00)) + ' ';
        haut = 0;
        continue;
      } else {
        outputString += '!erreur ' + dec2hex(haut) + '!';
        haut = 0;
      }
    }
    if (0xD800 <= b && b <= 0xDBFF) {
      haut = b;
    } else {
      outputString += dec2hex(b) + ' ';
    }
  }
  return( outputString.replace(/ $/, '') );
}

function convertCP2UTF16 ( textStr ) {
    var textString = convertChar2CP(textStr);
    var outputString = "";
    textString = textString.replace(/^\s+/, '');
    if (textString.length == 0) { return ""; }
    textString = textString.replace(/\s+/g, ' ');
    var listArray = textString.split(' ');
    for ( var i = 0; i < listArray.length; i++ ) {		
        var n = parseInt(listArray[i], 16);
        if (i > 0) { outputString += ' ';}
        if (n <= 0xFFFF) {
        outputString += dec2hex4(n);
        } else if (n <= 0x10FFFF) {
        n -= 0x10000
        outputString += dec2hex4(0xD800 | (n >> 10)) + ' ' + dec2hex4(0xDC00 | (n & 0x3FF));
        } else {
        outputString += '!erreur ' + dec2hex(n) +'!';
        }
    }
    return( outputString );
}

function getBase64Text(textStr){
  var utf16Text = convertCP2UTF16 (textStr);
  var base64Text = Buffer.from(utf16Text.replace(/ /ig,''),"hex").toString('base64');
   return(base64Text);
}

module.exports = { convertCP2UTF16,getBase64Text };
